<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.17">
<meta name="author" content="Francesco De Domenico">
<title>Java Cloud Development Bootstrap</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/*! Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */
/* Uncomment the following line when using as a custom stylesheet */
/* @import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"; */
html{font-family:sans-serif;-webkit-text-size-adjust:100%}
a{background:none}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
b,strong{font-weight:bold}
abbr{font-size:.9em}
abbr[title]{cursor:help;border-bottom:1px dotted #dddddf;text-decoration:none}
dfn{font-style:italic}
hr{height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
audio,video{display:inline-block}
audio:not([controls]){display:none;height:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type=checkbox],input[type=radio]{padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,::before,::after{box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;line-height:1;position:relative;cursor:auto;-moz-tab-size:4;-o-tab-size:4;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:0}
p{line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0}
ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}
ul.square{list-style-type:square}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:1px solid #dedede;word-wrap:normal}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt{background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
:not(pre).nobreak{word-wrap:normal}
:not(pre).nowrap{white-space:nowrap}
:not(pre).pre-wrap{white-space:pre-wrap}
:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre{color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;line-height:1.45;text-rendering:optimizeSpeed}
pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}
pre>code{display:block}
pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.2),inset 0 0 0 .1em #fff;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin:0 auto;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:flex;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border:1px solid #e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:none;background:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:hsla(0,0%,100%,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
details{margin-left:1.25rem}
details>summary{cursor:pointer;display:block;position:relative;line-height:1.6;margin-bottom:.625rem;outline:none;-webkit-tap-highlight-color:transparent}
details>summary::-webkit-details-marker{display:none}
details>summary::before{content:"";border:solid transparent;border-left:solid;border-width:.3em 0 .3em .5em;position:absolute;top:.5em;left:-1.25rem;transform:translateX(15%)}
details[open]>summary::before{border:solid transparent;border-top:solid;border-width:.5em .3em 0;transform:translateY(15%)}
details>summary::after{content:"";width:1.25rem;height:1em;position:absolute;top:.3em;left:-1.25rem}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class=paragraph]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6);word-wrap:anywhere}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border:1px solid #e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;border-radius:4px}
.exampleblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child{margin-bottom:0}
.sidebarblock{border:1px solid #dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;border-radius:4px}
.sidebarblock>:first-child{margin-top:0}
.sidebarblock>:last-child{margin-bottom:0}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock>.content>pre{border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}
.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class=highlight],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}
.literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.prettyprint{background:#f7f7f8}
pre.prettyprint .linenums{line-height:1.45;margin-left:2em}
pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}
pre.prettyprint li code[data-lang]::before{opacity:1}
pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}
table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}
table.linenotable td.code{padding-left:.75em}
table.linenotable td.linenos,pre.pygments .linenos{border-right:1px solid;opacity:.35;padding-right:.5em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}
pre.pygments span.linenos{display:inline-block;margin-right:.75em}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans-serif;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;font-size:.85rem;text-align:left;margin-right:0}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}
td.tableblock>.content>:last-child{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>*>tr>*{border-width:1px}
table.grid-cols>*>tr>*{border-width:0 1px}
table.grid-rows>*>tr>*{border-width:1px 0}
table.frame-all{border-width:1px}
table.frame-ends{border-width:1px 0}
table.frame-sides{border-width:0 1px}
table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}
table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}
table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}
table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}
table.stripes-all>*>tr,table.stripes-odd>*>tr:nth-of-type(odd),table.stripes-even>*>tr:nth-of-type(even),table.stripes-hover>*>tr:hover{background:#f8f8f7}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
li>p:empty:only-child::before{content:"";display:inline-block}
ul.checklist>li>p:first-child{margin-left:-1em}
ul.checklist>li>p:first-child>.fa-square-o:first-child,ul.checklist>li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist>li>p:first-child>input[type=checkbox]:first-child{margin-right:.25em}
ul.inline{display:flex;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
td.hdlist2{word-wrap:anywhere}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:4px solid #fff;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background:#00fafa}
.black{color:#000}
.black-background{background:#000}
.blue{color:#0000bf}
.blue-background{background:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background:#fa00fa}
.gray{color:#606060}
.gray-background{background:#7d7d7d}
.green{color:#006000}
.green-background{background:#007d00}
.lime{color:#00bf00}
.lime-background{background:#00fa00}
.maroon{color:#600000}
.maroon-background{background:#7d0000}
.navy{color:#000060}
.navy-background{background:#00007d}
.olive{color:#606000}
.olive-background{background:#7d7d00}
.purple{color:#600060}
.purple-background{background:#7d007d}
.red{color:#bf0000}
.red-background{background:#fa0000}
.silver{color:#909090}
.silver-background{background:#bcbcbc}
.teal{color:#006060}
.teal-background{background:#007d7d}
.white{color:#bfbfbf}
.white-background{background:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt,summary{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,span.alt,summary{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]{border-bottom:1px dotted}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#header,#content,#footnotes,#footer{max-width:none}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media amzn-kf8,print{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
pre.rouge table td { padding: 5px; }
pre.rouge table pre { margin: 0; }
pre.rouge .cm {
  color: #999988;
  font-style: italic;
}
pre.rouge .cp {
  color: #999999;
  font-weight: bold;
}
pre.rouge .c1 {
  color: #999988;
  font-style: italic;
}
pre.rouge .cs {
  color: #999999;
  font-weight: bold;
  font-style: italic;
}
pre.rouge .c, pre.rouge .ch, pre.rouge .cd, pre.rouge .cpf {
  color: #999988;
  font-style: italic;
}
pre.rouge .err {
  color: #a61717;
  background-color: #e3d2d2;
}
pre.rouge .gd {
  color: #000000;
  background-color: #ffdddd;
}
pre.rouge .ge {
  color: #000000;
  font-style: italic;
}
pre.rouge .gr {
  color: #aa0000;
}
pre.rouge .gh {
  color: #999999;
}
pre.rouge .gi {
  color: #000000;
  background-color: #ddffdd;
}
pre.rouge .go {
  color: #888888;
}
pre.rouge .gp {
  color: #555555;
}
pre.rouge .gs {
  font-weight: bold;
}
pre.rouge .gu {
  color: #aaaaaa;
}
pre.rouge .gt {
  color: #aa0000;
}
pre.rouge .kc {
  color: #000000;
  font-weight: bold;
}
pre.rouge .kd {
  color: #000000;
  font-weight: bold;
}
pre.rouge .kn {
  color: #000000;
  font-weight: bold;
}
pre.rouge .kp {
  color: #000000;
  font-weight: bold;
}
pre.rouge .kr {
  color: #000000;
  font-weight: bold;
}
pre.rouge .kt {
  color: #445588;
  font-weight: bold;
}
pre.rouge .k, pre.rouge .kv {
  color: #000000;
  font-weight: bold;
}
pre.rouge .mf {
  color: #009999;
}
pre.rouge .mh {
  color: #009999;
}
pre.rouge .il {
  color: #009999;
}
pre.rouge .mi {
  color: #009999;
}
pre.rouge .mo {
  color: #009999;
}
pre.rouge .m, pre.rouge .mb, pre.rouge .mx {
  color: #009999;
}
pre.rouge .sa {
  color: #000000;
  font-weight: bold;
}
pre.rouge .sb {
  color: #d14;
}
pre.rouge .sc {
  color: #d14;
}
pre.rouge .sd {
  color: #d14;
}
pre.rouge .s2 {
  color: #d14;
}
pre.rouge .se {
  color: #d14;
}
pre.rouge .sh {
  color: #d14;
}
pre.rouge .si {
  color: #d14;
}
pre.rouge .sx {
  color: #d14;
}
pre.rouge .sr {
  color: #009926;
}
pre.rouge .s1 {
  color: #d14;
}
pre.rouge .ss {
  color: #990073;
}
pre.rouge .s, pre.rouge .dl {
  color: #d14;
}
pre.rouge .na {
  color: #008080;
}
pre.rouge .bp {
  color: #999999;
}
pre.rouge .nb {
  color: #0086B3;
}
pre.rouge .nc {
  color: #445588;
  font-weight: bold;
}
pre.rouge .no {
  color: #008080;
}
pre.rouge .nd {
  color: #3c5d5d;
  font-weight: bold;
}
pre.rouge .ni {
  color: #800080;
}
pre.rouge .ne {
  color: #990000;
  font-weight: bold;
}
pre.rouge .nf, pre.rouge .fm {
  color: #990000;
  font-weight: bold;
}
pre.rouge .nl {
  color: #990000;
  font-weight: bold;
}
pre.rouge .nn {
  color: #555555;
}
pre.rouge .nt {
  color: #000080;
}
pre.rouge .vc {
  color: #008080;
}
pre.rouge .vg {
  color: #008080;
}
pre.rouge .vi {
  color: #008080;
}
pre.rouge .nv, pre.rouge .vm {
  color: #008080;
}
pre.rouge .ow {
  color: #000000;
  font-weight: bold;
}
pre.rouge .o {
  color: #000000;
  font-weight: bold;
}
pre.rouge .w {
  color: #bbbbbb;
}
pre.rouge {
  background-color: #f8f8f8;
}
</style>
</head>
<body class="book toc2 toc-left">
<div id="header">
<h1>Java Cloud Development Bootstrap</h1>
<div class="details">
<span id="author" class="author">Francesco De Domenico</span><br>
</div>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_introduzione">Introduzione</a></li>
<li><a href="#_risorse">Risorse</a></li>
<li><a href="#_prerequisiti">Prerequisiti</a></li>
<li><a href="#_obiettivi">Obiettivi</a></li>
<li><a href="#_corso_video_tutorials">Corso: Video tutorials</a>
<ul class="sectlevel2">
<li><a href="#_git">git</a></li>
<li><a href="#_spring_boot">Spring Boot</a></li>
<li><a href="#_docker">Docker</a></li>
<li><a href="#_kubernetes">Kubernetes</a></li>
</ul>
</li>
<li><a href="#_prima_di_iniziare">Prima di iniziare</a></li>
<li><a href="#_capitolo_1_getting_started_with_spring">Capitolo 1: Getting Started with Spring</a>
<ul class="sectlevel2">
<li><a href="#_1_1_introduzione">1.1 Introduzione</a></li>
<li><a href="#_1_2_il_mio_primo_progetto_spring">1.2 Il mio primo progetto Spring</a></li>
<li><a href="#_1_3_il_mio_primo_controller">1.3 Il mio primo @Controller</a></li>
<li><a href="#_1_4_passaggio_di_parametri">1.4 Passaggio di parametri</a></li>
<li><a href="#_1_5_responseentity_entità_custom_e_dto">1.5 ResponseEntity, Entità custom e DTO</a></li>
<li><a href="#_esercizi_getting_started">Esercizi: Getting Started</a></li>
</ul>
</li>
<li><a href="#_capitolo_2_la_logica_di_business_e_come_implementarla">Capitolo 2: La logica di business e come implementarla</a>
<ul class="sectlevel2">
<li><a href="#_service_autowired">@Service + @Autowired</a></li>
<li><a href="#_component">@Component</a></li>
<li><a href="#_configuration">@Configuration</a></li>
<li><a href="#_exception_handling">Exception Handling</a></li>
<li><a href="#_esercizi">Esercizi</a></li>
</ul>
</li>
<li><a href="#_soluzioni">Soluzioni</a></li>
</ul>
</div>
</div>
<div id="content">
<div class="sect1">
<h2 id="_introduzione">Introduzione</h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_risorse">Risorse</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="https://www.baeldung.com/"><strong>Baeldung blog</strong></a>: blog con molti tutorials ed esempi sulle librerie ed il framework Spring e Springboot</p>
</li>
<li>
<p><a href="https://amzn.to/3UqWkYG"><strong>[ENG] Pro Spring Boot 2: An Authoritative Guide to Building Microservices, Web and Enterprise Applications, and Best Practices</strong></a> - Felipe Gutierrez</p>
</li>
<li>
<p><a href="https://amzn.to/3dktGHK"><strong>[ENG] Pro Spring 5: An In-Depth Guide to the Spring Framework and Its Tools</strong></a> - Iuliana Cosmina, Rob Harrop, Chris Schaefer, Clarence Ho</p>
</li>
<li>
<p><a href="https://amzn.to/3dkGgqs"><strong>[ITA] Concetti di informatica e fondamenti di Java</strong></a> -  Cay S. Horstmann</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_prerequisiti">Prerequisiti</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Fondamenti di Java e programmazione ad oggetti</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Java 8+</p>
</li>
<li>
<p>Strutture dati: List, Set, Map,</p>
</li>
<li>
<p>Java Generics</p>
</li>
<li>
<p>Bean Injection</p>
</li>
<li>
<p>Stream API &#8658; lambda functions</p>
</li>
<li>
<p>Exception handling</p>
</li>
<li>
<p>Java Annotations "@"</p>
</li>
<li>
<p>equals and hashcode: differenze ed usi</p>
</li>
<li>
<p>Project Management tools: Maven &amp; Gradle</p>
</li>
<li>
<p>Data and SW Modeling: UML &amp; ER diagrams</p>
</li>
</ol>
</div>
</li>
<li>
<p>Network, HTTP &amp; Web</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Fondamenti:</p>
<div class="olist lowerroman">
<ol class="lowerroman" type="i">
<li>
<p>com&#8217;è fatta una richiesta HTTP?</p>
</li>
<li>
<p>Verbo, Headers, Corpo della richiesta, corpo della risposta</p>
</li>
<li>
<p>mime-type, Content-Types</p>
</li>
<li>
<p>Web markup/notations: HTML, XML, JSON, YAML</p>
</li>
<li>
<p>CORS</p>
</li>
</ol>
</div>
</li>
<li>
<p>Web Standards</p>
<div class="olist lowerroman">
<ol class="lowerroman" type="i">
<li>
<p>JWT</p>
</li>
<li>
<p>OAuth2: REST + Bearer Token</p>
</li>
</ol>
</div>
</li>
<li>
<p>RESTful APIs</p>
</li>
<li>
<p>Che cos&#8217;è un webserver?</p>
</li>
</ol>
</div>
</li>
<li>
<p>DB Transazionali</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>MySQL/MariaDB</p>
</li>
<li>
<p>Creazione tabelle</p>
</li>
<li>
<p>Queries con joins</p>
</li>
<li>
<p>Transazioni</p>
</li>
<li>
<p>Foreign keys</p>
</li>
<li>
<p>Script di inizializzazione tabelle e popolamento database</p>
</li>
</ol>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_obiettivi">Obiettivi</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Source distributed version control systems</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Git: di cosa si tratta?</p>
<div class="olist lowerroman">
<ol class="lowerroman" type="i">
<li>
<p>Concetti base: branches, commit, merge, risoluzione dei conflitti, stashing</p>
</li>
</ol>
</div>
</li>
<li>
<p>CI/CD: di cosa si tratta?</p>
</li>
</ol>
</div>
</li>
<li>
<p>Spring + Spring Boot</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Cos&#8217;è un framework?</p>
</li>
<li>
<p>Cos&#8217;è il paradigma MVC?</p>
</li>
<li>
<p>Spring Bean Initialization &amp; @SpringApplication</p>
</li>
<li>
<p>@Component, @Client, @Service, @Controller, @Configuration, @Value</p>
</li>
<li>
<p>Spring @Entity</p>
</li>
<li>
<p>@OneToOne, @OneToMany, @ManyToOne, @ManyToMany</p>
</li>
<li>
<p>Hibernate</p>
</li>
<li>
<p>Spring Repositories</p>
</li>
<li>
<p>JPA Queries</p>
</li>
<li>
<p>Object serialization/deserialization through Jackson</p>
</li>
<li>
<p>Lombok Annotations</p>
</li>
<li>
<p>CrossOrigin</p>
</li>
</ol>
</div>
</li>
<li>
<p>Docker</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Docker images, orchestrazione ed interfacciamento con OS host (es: Ports Expose)</p>
</li>
<li>
<p>Dockerfile: struttura e sintassi</p>
<div class="olist lowerroman">
<ol class="lowerroman" type="i">
<li>
<p>Creazione Dockerfile per applicativo Springboot</p>
</li>
</ol>
</div>
</li>
<li>
<p>Docker Compose: struttura e sintassi</p>
<div class="olist lowerroman">
<ol class="lowerroman" type="i">
<li>
<p>Composizione servizi, volumes, volumes mount</p>
</li>
<li>
<p>Comandi compose per esecuzione</p>
</li>
</ol>
</div>
</li>
</ol>
</div>
</li>
<li>
<p>Kubernetes</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Relazione tra Kubernetes e Docker</p>
</li>
<li>
<p>Worker, node e pods</p>
</li>
<li>
<p>Secrets ed Environment Variables di un deployment Kubernetes</p>
</li>
</ol>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_corso_video_tutorials">Corso: Video tutorials</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_git">git</h3>
<div class="videoblock">
<div class="content">
<iframe width="800" height="450" src="https://www.youtube.com/embed/N_bMCff8q6A?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_spring_boot">Spring Boot</h3>
<div class="videoblock">
<div class="content">
<iframe width="800" height="450" src="https://www.youtube.com/embed/vtPkZShrvXQ?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_docker">Docker</h3>
<div class="videoblock">
<div class="content">
<iframe width="800" height="450" src="https://www.youtube.com/embed/3c-iBn73dDE?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_kubernetes">Kubernetes</h3>
<div class="videoblock">
<div class="content">
<iframe width="800" height="450" src="https://www.youtube.com/embed/d6WC5n9G_sM?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_prima_di_iniziare">Prima di iniziare</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Al fine di installare il software necessario, su Windows, si suggerisce l&#8217;installazione del package manager <strong>chocolatey</strong>.</p>
</div>
<div class="paragraph">
<p>Aprire terminale Powershell ed eseguire:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Una volta installato il package manager potrà essere utilizzato per installare il software propedeutico allo sviluppo:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="powershell"><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">vscode</span><span class="w"> </span><span class="nx">temurin17</span><span class="w"> </span><span class="nx">maven</span><span class="w"> </span><span class="nx">gradle</span><span class="w"> </span><span class="nx">curl</span><span class="w"> </span><span class="nx">git</span><span class="w"> </span><span class="nx">postman</span><span class="w"> </span><span class="nx">chocolateygui</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Consigliamo inoltre di avere, su sistemi Windows, degli ambienti shell aggiornati:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="powershell"><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">powershell-core</span><span class="w"> </span><span class="nx">microsoft-windows-terminal</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>per chi utilizzasse shell *nix non ci sono problemi di compatibilità con gli esempi riportati in questa guida, gli utenti windows possono usufruire di un environment linux attraverso la piattaforma Windows Subsystem for Linux. Potete consultare la guida per attivarlo al seguente <a href="https://learn.microsoft.com/it-it/training/modules/get-started-with-windows-subsystem-for-linux/">link</a>.</p>
</div>
<div class="paragraph">
<p>Una volta installato Visual Studio Code installare le seguenti estensioni:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://marketplace.visualstudio.com/items?itemName=redhat.java">Language support for Java ™ for Visual Studio Code</a></p>
</li>
<li>
<p><a href="https://marketplace.visualstudio.com/items?itemName=Pivotal.vscode-boot-dev-pack">Spring Boot Extension Pack</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_capitolo_1_getting_started_with_spring">Capitolo 1: Getting Started with Spring</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_1_1_introduzione">1.1 Introduzione</h3>
<div class="paragraph">
<p><strong>Spring</strong> nasce come <a href="https://it.wikipedia.org/wiki/Framework">framework</a> per lo sviluppo di applicazioni Server. Al suo interno comprende una collezione di pacchetti nata per facilitare il lavoro degli sviluppatori definendo un pattern preciso di utilizzo.
Utilizzando i paradigmi forniti dal framework è possibile scrivere, grazie all&#8217;uso di <a href="https://www.baeldung.com/java-decorator-pattern">decoratori</a>, classi concise nel numero di righe di codice ma ricche di funzionalità, ad esempio:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Creare classi di configurazioni automaticamente popolate con il contenuto di file properties</p>
</li>
<li>
<p>Effettuare queries su database scrivendo solo la firma di un metodo</p>
</li>
<li>
<p>Creare un&#8217;API REST tramite l&#8217;uso di un unico decoratore agganciato ad un metodo Java</p>
</li>
<li>
<p>&#8230;&#8203; e molto altro!</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Spring Boot</strong> è un progetto relativamente più recente, nasce con l&#8217;esigenza di avere una soluzione facilmente deployabile, self-contained, di server che erogano un determinato servizio. Questo tipo di approccio si è rivelato particolarmente vincente con il nascere di architetture di calcolatori distribuite e containerizzate in quanto Spring Boot fornisce un eseguibile Java contenente tutti i pacchetti e le librerie, compreso un <a href="https://en.wikipedia.org/wiki/Web_server">webserver</a> embedded, da eseguire.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Un archivio <strong>jar</strong> che contenga tutto il necessario senza bisogno di librerie esterne è detto <strong>fatjar</strong>. Quando si dispone di tale pacchetto è possibile creare un leggerissimo container per l&#8217;esecuzione del servizio contenente soltanto una distro Linux minimale ed una JRE per l&#8217;esecuzione dello stesso!
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Il framework Spring è costituito da un ecosistema esteso di pacchetti e librerie (spesso frameworks a loro volta). Al fine di gestire tale complesso insieme di software è necessario gestire un progetto Spring tramite un software di distribution management, al momento sono supportati:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://maven.apache.org/">Maven</a></p>
</li>
<li>
<p><a href="https://gradle.org/">Gradle</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Questo tipo di strumenti ci consentono di risolvere le dipendenze esterne del nostro specifico progetto e garantirne la portabilità. Senza questo tipo di strumenti sarebbe di gran lunga più complesso fornire il nostro software a terzi in quanto costoro dovrebbero avere, nel loro CLASSPATH locale, tutte le librerie necessarie ed importate dal software che abbiamo scritto.</p>
</div>
<div class="paragraph">
<p>Con una soluzione di questo tipo invece dovremo condividere, oltre al codice sorgente della nostra applicazione, solo uno specifico file chiamato <strong>file di distribuzione</strong>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>pom.xml</strong> per Maven</p>
</li>
<li>
<p><strong>build.gradle</strong> per Gradle</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Spring offre un tool web per la generazione iniziale di un progetto Spring boot chiamato <a href="https://start.spring.io/">Spring initializr</a> attraverso il quale è possibile scegliere i parametri iniziali attraverso cui generare il nostro progetto.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./img/springinitializr.png" alt="springinitializr">
</div>
</div>
<div class="paragraph">
<p>Di particolare importanza sono i parametri:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Group: che determina il package principale della nostra applicazione Spring</p>
</li>
<li>
<p>Artifact: il nome della nostra applicazione(come Java format)</p>
</li>
<li>
<p>Name: Il nome della nostra applicazione(come Display name)</p>
</li>
<li>
<p>Description: Una descrizione della nostra applicazione</p>
</li>
<li>
<p>Package name: tipicamente viene composto automaticamente componendo Group+Artifact - ma è possibile effettuarne l&#8217;override</p>
</li>
<li>
<p>Il packaging: il tipo di file di output che ci aspettiamo. Tipicamente le applicazioni full embedded, come quelle spring, vengono pacchettizzate sotto forma di jar comprendente tutte le librerie propedeutiche all&#8217;esecuzione del nostro software</p>
</li>
<li>
<p>Java: la versione target di Java</p>
</li>
<li>
<p>Dipendenze: Spring initializr offre un elenco di dipendenze popolari propedeutiche alla generazione di codice automatica, predisposizione controller per API REST, Unit Testing automatico, ecc&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
è possibile aggiungere dipendenze anche dopo la generazione del progetto su spring initializr, semplicemente includendolo nel file di distribuzione come dipendenza
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Dove posso trovare altre dipendenze per il mio software?</div>
<div class="paragraph">
<p>Esistono vari motori di ricerca dedicati a questo scopo, uno dei più popolari, vero e proprio punto di riferimento è <a href="https://mvnrepository.com/">MVN Repository</a>.</p>
</div>
<div class="paragraph">
<p>Non solo è possibile generare i tag necessari all&#8217;inclusione dei pacchetti nel nostro file di distribuzione, ma vengono anche indicate le vulnerabilità (CVE) delle versioni specifiche di ogni dipendenza.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_1_2_il_mio_primo_progetto_spring">1.2 Il mio primo progetto Spring</h3>
<div class="paragraph">
<p>Una volta generato il progetto su spring initializr avremo una struttura sul file system fatta in questo modo:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./img/demoproject.png" alt="demoproject">
</div>
</div>
<div class="paragraph">
<p>I file rilevanti per l&#8217;utilizzo sono:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>DemoApplication.java: file principale dell&#8217;applicazione, entry point di Spring Boot</p>
</li>
<li>
<p>application.properties: file di configurazione in formato properties java</p>
</li>
<li>
<p>DemoApplicationTest.java: file di esempio contenente UnitTests</p>
</li>
<li>
<p>pom.xml: file di distribuzione Maven</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="_demoapplication_java">DemoApplication.java</h4>
<div class="paragraph">
<p>Analizziamo il contenuto di <strong>DemoApplication.java</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoApplication</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">DemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Possiamo innanzitutto notare che il package generato è il medesimo scelto inizialmente su spring initializr Group+Name. Successivamente notiamo il decoratore <strong>@SpringBootApplication</strong></p>
</div>
<div class="paragraph">
<p>Questo è un decoratore fondamentale per Spring Boot, in quanto dichiara al framework di inizializzare l&#8217;applicazione a partire da questa classe e di inizializzare tutti gli <a href="https://www.baeldung.com/spring-bean"><strong>Spring Beans</strong></a> a partire dal medesimo package della SpringBootApplication stessa.</p>
</div>
<div class="paragraph">
<p>Di fatti è buona prassi iniziare a creare sotto packages a partire da <strong>package com.example.demo</strong> in modo da garantirne la loro inizialzzazione. Immaginiamo di voler creare un nuovo client HTTP per accedere al servizio XZY, sarebbe bene collocarlo in un package dedicato all&#8217;interno del quale creare una classe per lo stesso client quindi:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Creeremo il subpackage com.example.demo.xyz.client</p>
</li>
<li>
<p>Al suo interno creeremo una classe chiamata XyzClient.java</p>
</li>
</ol>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
la naming convention è molto importante per garantire la leggibilità del nostro codice, tipicamente in Java si utilizza la notazione <a href="https://en.wikipedia.org/wiki/Camel_case">camelCase</a> per metodi e variabili. Le classi seguono la medesima convenzione ma iniziano per lettera maiuscola.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_application_properties">application.properties</h4>
<div class="paragraph">
<p>Si tratta di un file di testo contenente le cosiddette <strong>properties</strong> dell&#8217;applicazione. Si tratta di valori che non sono hardcoded nell&#8217;applicazione ma possono essere modificati <strong>senza ricompilare il progetto</strong>.</p>
</div>
<div class="paragraph">
<p>Per questa ragione è comodo avere su questo files parametri di configurazioni che possono essere soggetti a modifica nel corso di vita del software che stiamo progettando, ecco alcuni esempi:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>La porta di ascolto di un webserver</p>
</li>
<li>
<p>Il path per effettuare una chiamata ad un servizio rest</p>
</li>
<li>
<p>La dimensione massima accettata per una determinata richiesta</p>
</li>
<li>
<p>Le label di testo presenti su un template HTML</p>
</li>
<li>
<p>e molto altro!</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_demoapplicationtest_java">DemoApplicationTest.java</h4>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.test.context.SpringBootTest</span><span class="o">;</span>

<span class="nd">@SpringBootTest</span>
<span class="kd">class</span> <span class="nc">DemoApplicationTests</span> <span class="o">{</span>

	<span class="nd">@Test</span>
	<span class="kt">void</span> <span class="nf">contextLoads</span><span class="o">()</span> <span class="o">{</span>
	<span class="o">}</span>

<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In questo esempio la classe di test è scarna, tuttavia contiene un unico metodo utile che verifica se il <strong>contesto</strong>, ossia l&#8217;insieme dei beans e delle classi appartenenti all&#8217;applicazione, è stato correttamente inizializzato.</p>
</div>
</div>
<div class="sect3">
<h4 id="_pom_xml">pom.xml</h4>
<div class="paragraph">
<p>il file di distribuzione maven, riportiamo per brevità le parti più importanti:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span> <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
	<span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
	<span class="nt">&lt;parent&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;version&gt;</span>2.7.4<span class="nt">&lt;/version&gt;</span>
		<span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
	<span class="nt">&lt;/parent&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>com.example<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>demo<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
	<span class="nt">&lt;name&gt;</span>demo<span class="nt">&lt;/name&gt;</span>
	<span class="nt">&lt;description&gt;</span>Demo project for Spring Boot<span class="nt">&lt;/description&gt;</span>
	<span class="nt">&lt;properties&gt;</span>
		<span class="nt">&lt;java.version&gt;</span>17<span class="nt">&lt;/java.version&gt;</span>
	<span class="nt">&lt;/properties&gt;</span>
	<span class="nt">&lt;dependencies&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>

		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;/dependencies&gt;</span>

	<span class="nt">&lt;build&gt;</span>
		<span class="nt">&lt;plugins&gt;</span>
			<span class="nt">&lt;plugin&gt;</span>
				<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
				<span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;/plugin&gt;</span>
		<span class="nt">&lt;/plugins&gt;</span>
	<span class="nt">&lt;/build&gt;</span>

<span class="nt">&lt;/project&gt;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_1_3_il_mio_primo_controller">1.3 Il mio primo @Controller</h3>
<div class="paragraph">
<p>Il decoratore <strong>@Controller</strong> (ed anche le sue specializzazioni, come @RestController) è di vitale importanza in un progetto Spring Boot.</p>
</div>
<div class="paragraph">
<p>Questo tipo di notazione viene utilizzata dal framework Spring per individuare le classi contenenti gli handler che devono essere <em>bindati</em> al webserver embedded (Tomcat è il webserver default).</p>
</div>
<div class="paragraph">
<p>Inizializziamo un nuovo progetto Spring da <a href="https://start.spring.io/">spring initializr</a> aggiungendo come dipendenza Spring Web</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./img/spring_web.jpg" alt="spring web">
</div>
</div>
<div class="paragraph">
<p>dopodichè generiamo il progetto iniziale.</p>
</div>
<div class="paragraph">
<p>Noteremo la solita struttura di progetto ma questa volta il file <strong>pom.xml</strong> avrà una nuova dipendenza</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="xml"><span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Aggiungere una dipendenza informa la piattaforma di tooling e runtime che sono disponibili nuovi oggetti Java nel nostro CLASS_PATH, quindi saremo in grado di importare tutta una serie di strumenti che ci aiutino nello sviluppo.</p>
</div>
<div class="paragraph">
<p>Dobbiamo creare una classe che contenga un @Controller, per prima cosa creiamo un subpackage a partire dal nostro package di default (in questo caso abbiamo lasciato il default di spring initializr com.example.demo).</p>
</div>
<div class="paragraph">
<p>L&#8217;idea è quella di definire una struttura gerarchica che contenga le classi del nostro progetto, in prima istanza, non volendo fare distinzioni di <a href="https://it.wikipedia.org/wiki/Dominio_(informatica)">Dominio di business</a> creeremo un subpackage <strong>controller</strong> che conterrà tutti i controller della nostra applicazione.</p>
</div>
<div class="paragraph">
<p>Creiamo un primo controller che restituisca all&#8217;utente un messaggio di <strong>Hello World!</strong>.</p>
</div>
<div class="paragraph">
<p>All&#8217;interno del package com.example.demo.controller creiamo la classe <strong>HelloWorldController.java</strong>. Il nome della classe è importante, anche se non ha un vero e proprio significato funzionale incoraggiamo l&#8217;utilizzo non solo del CamelCase, ma anche di battezzare le classi nel formato {NomeDominio}{NomeComponente}.java - in questo modo siamo già in grado di comprendere la natura ed il ruolo di una classe semplicemente leggendone il nome!</p>
</div>
<div class="paragraph">
<p>All&#8217;interno di una classe decorata con @Controller possiamo definire un insieme di metodi, detti handler, che gestiranno una chiamata http del webserver con i parametri che abbiamo utilizzato per decorare l&#8217;handler.</p>
</div>
<div class="paragraph">
<p>Il nostro desiderio è creare una API che risponda sul path <strong>/hello</strong> con verbo <strong>HTTP GET</strong> restituendo la stringa "Hello World!".</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMethod</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>

<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span> <span class="o">{</span>

    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/hello"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
    <span class="nd">@ResponseBody</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">helloWorld</span><span class="o">(){</span>
        <span class="k">return</span> <span class="s">"Hello World!"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>La classe è di facile lettura. La notazione @Controller avvisa il framework che questo file contiene informazioni sugli handlers da bindare sul webserver, tuttavia dobbiamo informare il framework sul <strong>path</strong> e sul <strong>verbo HTTP</strong> necessari per invocare l&#8217;handler. In questo caso abbiamo utilizzato il decoratore <strong>@RequestMapping</strong> che al suo interno contiene i parametri <strong>value</strong> e <strong>method</strong> che contengono le informazioni necessarie per esporre la nostra API sul webserver embdedded. In ultimo, informiamo il framework che dovrà essere fornito un response body http di tipo <strong>String</strong></p>
</div>
<div class="paragraph">
<p>Dalla root del nostro progetto proviamo a farlo partire con il comando:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell"><span class="o">&gt;</span> mvn spring-boot:run</code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="./img/spring_started.jpg" alt="spring started">
</div>
</div>
<div class="paragraph">
<p>Non appena leggeremo <em>Started DemoApplication</em> vorrà dire che il webserver è in ascolto sulla nostra macchina sulla porta 8080 (porta di default).</p>
</div>
<div class="paragraph">
<p>possiamo a questo punto testare la nostra nuova API</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="powershell"><span class="n">PS</span><span class="w"> </span><span class="nx">C:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">curl</span><span class="w"> </span><span class="nx">http://localhost:8080/hello</span><span class="w">
</span><span class="n">Hello</span><span class="w"> </span><span class="nx">World</span><span class="o">!</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>La nuova prima API funziona!</p>
</div>
<div class="paragraph">
<p>In questo corso utilizzeremo nella maggior parte dei case una specializzazione della classe @Controller dedicata all&#8217;esposizione di API Rest chiamata <strong>@RestController</strong>. Su questo tipo di classe abbiamo dei decoratori specifici che includono nella loro definizione il verbo HTTP necessario per richiamare l&#8217;handler, in questo case useremo <strong>GetMapping</strong>.</p>
</div>
<div class="paragraph">
<p>Prova a riscrivere il controller <strong>HelloWorldController</strong> sostituendo @Controller e @RequestMapping!</p>
</div>
</div>
<div class="sect2">
<h3 id="_1_4_passaggio_di_parametri">1.4 Passaggio di parametri</h3>
<div class="paragraph">
<p>Nel capitolo precedente abbiamo imparato cos&#8217;è un Controller in Spring e come può essere utilizzato per creare un' API Hello World con pochissime righe di codice. L&#8217;API che abbiamo creato può fare ben poco se non rispondere in maniera statica allo stesso modo.</p>
</div>
<div class="paragraph">
<p>Per fortuna il framework Spring ci consente di programmare il nostro webserver in modo sofisticato, supportando una grande varietà di mime-types e codifica dei parametri HTTP passati. Gran parte del lavoro di ricezione e decodifica degli stessi verrà fatto dal framework, a patto di scrivere correttamente i decoratori da utilizzare per annotare i nostri handler.</p>
</div>
<div class="paragraph">
<p>Ipotizziamo di voler rendere la nostra API /hello un po' più dinamica, come ad esempio rispondere al nostro nome, se passato come parametro.
Per fare ciò abbiamo molti modi per farlo, ad esempio:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>utilizzare un path parameter</p>
</li>
<li>
<p>utilizzare un query string parameter</p>
</li>
<li>
<p>un header HTTP agganciato alla richiesta</p>
</li>
<li>
<p>un cookie specifico</p>
</li>
<li>
<p>un request body</p>
</li>
</ul>
</div>
<div class="admonitionblock caution">
<table>
<tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="ulist">
<ul>
<li>
<p>È possibile inviare una HTTP Request con body per verbo GET?</p>
</li>
<li>
<p>È corretto farlo?</p>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Proviamo in prima istanza ad immettere il nostro nome come path parameter, la nostra API dovrà rispondere al path /hello/{name} e restituire al chiamante un corpo della risposta "Hello {name}!".</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.controller</span><span class="o">;</span>


<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PathVariable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span> <span class="o">{</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/hello/{name}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nd">@ResponseBody</span> <span class="nc">String</span> <span class="nf">helloWorld</span><span class="o">(</span>
        <span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">name</span>
    <span class="o">){</span>
        <span class="k">return</span> <span class="s">"Hello %s!"</span><span class="o">.</span><span class="na">formatted</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Notiamo innanzitutto che abbiamo sostituito @Controller con @RestController e @RequestMapping con @GetMapping, inoltre abbiamo spostato @ResponseBody immediatamente prima del valore di ritorno del metodo, in modo da rendere immediatamente chiaro ad una prima lettura che tipo di dato possiamo aspettarci dall&#8217;handler.</p>
</div>
<div class="paragraph">
<p>Sul path dell&#8217;api abbiamo aggiunto un {name}, allo stesso modo abbiamo aggiunto un parametro di input per il metodo helloWorld, ossia una variabile di tipo String chiamata name.</p>
</div>
<div class="paragraph">
<p>Spring è riesce in automatico a comprendere che l&#8217;entità tra parentesi è collegata alla variabile di input del metodo helloWorld, questa variabile sarà dunque correttamente valorizzata (se passata correttamente all&#8217;API) e disponibile all&#8217;interno del metodo stesso.</p>
</div>
<div class="paragraph">
<p>Tramite una semplice String format di Java abbiamo decorato la stringa di ritorno con il nostro nome.</p>
</div>
<div class="paragraph">
<p>Proviamo dunque la nostra API:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./img/hello_frenk_path_param.jpg" alt="hello frenk path param">
</div>
</div>
<div class="paragraph">
<p>È possibile ottenere il medesimo risultato utilizzando un query string parameter e lasciando il path come impostato inizialmente:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.controller</span><span class="o">;</span>


<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestParam</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span> <span class="o">{</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nd">@ResponseBody</span> <span class="nc">String</span> <span class="nf">helloWorld</span><span class="o">(</span>
        <span class="nd">@RequestParam</span> <span class="nc">String</span> <span class="n">name</span>
    <span class="o">){</span>
        <span class="k">return</span> <span class="s">"Hello %s!"</span><span class="o">.</span><span class="na">formatted</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Il codice è estremamente simile al precedente, tuttavia abbiamo annotato il parametro di input del metodo come @RequestParam, pertanto il webserver si attenderà questo parametro come query string paramenter.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./img/hello_frenk_req_param.jpg" alt="hello frenk req param">
</div>
</div>
<div class="paragraph">
<p>Nella sezione esercizi implementerai l&#8217;API anche con i restanti metodi!</p>
</div>
</div>
<div class="sect2">
<h3 id="_1_5_responseentity_entità_custom_e_dto">1.5 ResponseEntity, Entità custom e DTO</h3>
<div class="paragraph">
<p>Abbiamo imparato a programmare un controller ed a dichiarare gli handlers per gestire le API, come inviare dati agli handlers e come dichiarare il tipo di risposta che il webserver invierà al chiamante.</p>
</div>
<div class="paragraph">
<p>Nel paragrafo precedente abbiamo lavorato unicamente dei tipi di dati di tipo stringa ma non abbiamo potuto lavorare su l&#8217;oggetto di risposta vero e proprio.</p>
</div>
<div class="paragraph">
<p>Tipicamente ad una chiamata HTTP spetta una risposta articolata da vari elementi come:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>headers di risposta</p>
</li>
<li>
<p>corpo di risposta</p>
</li>
<li>
<p>codice di stato</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Negli esempi precedenti effettuiamo unicamente il ritorno del dato stringa, ma non possiamo controllare appieno la risposta HTTP alla quale siamo interessati, dopotutto stiamo scrivendo un handler che deve fare proprio questo!</p>
</div>
<div class="paragraph">
<p>Fortunatamente Spring ha una classe specifica per manipolare la risposta HTTP chiamata <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html"><strong>ResponseEntity</strong></a>.</p>
</div>
<div class="paragraph">
<p>ResponseEntity fa leva dei Java Generics per dichiarare il tipo di dato che deve custodire e restituire al chiamante. Inoltre possiamo aggiungere a questo oggetto degli headers custom di risposta nonché lo status code di risposta.</p>
</div>
<div class="paragraph">
<p>Vediamo un esempio concreto su come utilizzare la ResponseEntity dunque, riscriviamo il precedente esempio di API helloWorld facendo uso di una ResponseEntity!</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.controller</span><span class="o">;</span>


<span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestParam</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span> <span class="o">{</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nd">@ResponseBody</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">helloWorld</span><span class="o">(</span>
        <span class="nd">@RequestParam</span> <span class="nc">String</span> <span class="n">name</span>
    <span class="o">){</span>
        <span class="nc">String</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="s">"Hello %s!"</span><span class="o">.</span><span class="na">formatted</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">responseBody</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Abbiamo modificato il metodo helloWorld per restituire una ResponseEntity contenente un tipo String dopodiché abbiamo utilizzato il metodo <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html#ok--"><strong>ok()</strong></a> che restituisce un builder per l&#8217;oggetto stesso, che accetta come input un oggetto dello stesso tipo indicato nelle parentesi angolari &lt;&gt;, in questo caso il tipo String che restituisce il messaggio di hello.</p>
</div>
<div class="paragraph">
<p>Consultando la documentazione ufficiale è possibile notare che è presente un builder per ogni stato HTTP più come <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html#notFound--">notFound()</a>, <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html#noContent--">noContent()</a>, <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html#internalServerError--">internalServerError()</a>.</p>
</div>
<div class="paragraph">
<p>Abbiamo anche la possibilità di definire nella sua interezza la risposta come nell&#8217;esempio riportato:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.controller</span><span class="o">;</span>


<span class="kn">import</span> <span class="nn">org.springframework.http.HttpStatus</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span> <span class="o">{</span>

	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/testBadRequest"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nd">@ResponseBody</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">testBadRequest</span><span class="o">(){</span>
		<span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="s">"BAD_REQUEST"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In questo caso abbiamo inserito uno stato arbitrario nella risposta, utilizzando la classe di Spring <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.html">HttpStatus</a> per definire il codice http di ritorno. Proviamo ad invocare l&#8217;API:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell">PS C:<span class="se">\&gt;</span> curl http://localhost:8080/testBadRequest <span class="nt">-v</span>
<span class="k">*</span>   Trying 127.0.0.1:8080...
<span class="k">*</span> Connected to localhost <span class="o">(</span>127.0.0.1<span class="o">)</span> port 8080 <span class="o">(</span><span class="c">#0)</span>
<span class="o">&gt;</span> GET /testBadRequest HTTP/1.1
<span class="o">&gt;</span> Host: localhost:8080
<span class="o">&gt;</span> User-Agent: curl/7.83.1
<span class="o">&gt;</span> Accept: <span class="k">*</span>/<span class="k">*</span>
<span class="o">&gt;</span>
<span class="k">*</span> Mark bundle as not supporting multiuse
&lt; HTTP/1.1 400
&lt; Content-Type: text/plain<span class="p">;</span><span class="nv">charset</span><span class="o">=</span>UTF-8
&lt; Content-Length: 11
&lt; Date: Fri, 30 Sep 2022 19:53:19 GMT
&lt; Connection: close
&lt;
BAD_REQUEST<span class="k">*</span> Closing connection 0</code></pre>
</div>
</div>
<div class="paragraph">
<p>È possibile notare non solo abbiamo ottenuto come corpo della risposta BAD_REQUEST ma abbiamo anche uno status code 400.</p>
</div>
<div class="paragraph">
<p>Dovrebbe essere chiaro che il paradigma REST si basa su un dialogo fatto tra client e server, di richieste e risposte.</p>
</div>
<div class="paragraph">
<p>Attraverso una successione di chiamate REST un client può ottenere la fotografia di un sistema, modificane lo stato oppure avviare un processo asincrono (il cui stato può essere verificato sempre tramite chiamate REST).</p>
</div>
<div class="paragraph">
<p>È possibile veicolare le informazioni sotto forma di risposta in molteplici formati. Uno dei formati più comuni di interscambio è il formato JSON. Spring Boot, in assenza di indicazioni diverse, provvederà a leggere e rispondere alle nostre richieste proprio con il formato JSON!</p>
</div>
<div class="paragraph">
<p>Al fine di rendere possibile la lettura da parte di Spring Boot della nostra richiesta il framework si appoggia ad una libreria di serializzazione/deserializzazione chiamata <a href="https://github.com/FasterXML/jackson">Jackson</a>.</p>
</div>
<div class="paragraph">
<p>Abbiamo menzionato serializzazione e deserializzazione, ma cosa sono esattamente?</p>
</div>
<div class="paragraph">
<p>Quando inviamo un @RequestBody utilizzando una chiamata cURL oppure Postman stiamo in realtà trasferendo una sequenza (o serie) di bytes. Questo processo di trasformazione da oggetto a serie di bytes è detto <strong>serializzazione</strong>.</p>
</div>
<div class="paragraph">
<p>SpringBoot, quando riceve la chiamata, prima di trasferire il controllo al Controller (scusate il gioco di parole), tenta di effettuare il processo inverso, ossia trasformare la sequenza o serie di bytes in un oggetto intellegibile Java. Questo processo è appunto detto <strong>deserializzazione</strong>.</p>
</div>
<div class="paragraph">
<p>Possiamo quindi passare a SpringBoot oggetti molto sofisticati come @RequestBody, se abbiamo fornito al framework informazioni adeguate potremo utilizzare la richiesta nel nostro codice ed adoperarla in maniera semplice in quanto verrà costruito un vero e proprio oggetto Java! Potremmo quindi utilizzare funzionalità come i Getters ed i Setters per ogni campo, definire all&#8217;interno della medesima classe altre classi innestate, utilizzare funzionalità come equals ed hashcode per poter organizzare il nostro oggetto in strutture dati complesse oppure memorizzare la richiesta in un database.</p>
</div>
<div class="paragraph">
<p>Tipicamente Spring Boot si aspetta che il decoratore @RequestBody sia seguito da una classe Java che rappresenti l&#8217;oggetto che ci aspettiamo di ricevere.</p>
</div>
<div class="paragraph">
<p>Modifichiamo l&#8217;API HelloWorld vista in precedenza in modo da ricevere in @RequestBody un oggetto che chiameremo HelloWorldDTO.</p>
</div>
<div class="paragraph">
<p>Ma che cosa è un DTO? È l&#8217;acronimo di <a href="https://en.wikipedia.org/wiki/Data_transfer_object">Data transfer object</a> ed è, in semplici parole, un <em>contenitore</em> di dati.</p>
</div>
<div class="paragraph">
<p>Come questo contenitore debba essere letto, utilizzato e trasformato sarà poi compito della nostra applicazione, ma a tutti gli effetti abbiamo bisogno di un <em>wrapper</em> che contenga le informazioni contenute nella richiesta in modo da poter essere lette.</p>
</div>
<div class="paragraph">
<p>Riprendiamo l&#8217;esercizio precedente e creiamo un subpackage <strong>dto</strong>, creiamo il file HelloWorldDTO.java al suo interno:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.dto</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldDTO</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">nome</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">HelloWorldDTO</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">HelloWorldDTO</span><span class="o">(</span><span class="nc">String</span> <span class="n">nome</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">nome</span> <span class="o">=</span> <span class="n">nome</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getNome</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">nome</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNome</span><span class="o">(</span><span class="nc">String</span> <span class="n">nome</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">nome</span> <span class="o">=</span> <span class="n">nome</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="k">this</span><span class="o">)</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">HelloWorldDTO</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">HelloWorldDTO</span> <span class="n">helloWorldDTO</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HelloWorldDTO</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">nome</span><span class="o">,</span> <span class="n">helloWorldDTO</span><span class="o">.</span><span class="na">nome</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">nome</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Un oggetto java abbastanza semplice, contiene un unico campo privato <strong>nome</strong> e due costruttori, con e senza argomenti di ingresso. Per accedere ai campi dell&#8217;oggetto avremo dei getter e dei setter dedicati. Non ci dimentichiamo di implementare gli opportuni metodi <strong>equals</strong> ed <strong>hashCode</strong>, in questo modo abbiamo la garanzia di poter sempre confrontare e gestire in opportune strutture dati gli oggetti della nostra applicazione.</p>
</div>
<div class="paragraph">
<p>Vediamo ora il controller modificato:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PostMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.FRestController</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.example.demo.dto.HelloWorldDTO</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span> <span class="o">{</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nd">@ResponseBody</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">helloWorld</span><span class="o">(</span>
            <span class="nd">@RequestBody</span> <span class="nc">HelloWorldDTO</span> <span class="n">helloWorldDTO</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">response</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Hello %s!"</span><span class="o">,</span> <span class="n">helloWorldDTO</span><span class="o">.</span><span class="na">getNome</span><span class="o">());</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>proviamo ad invocare l&#8217;API:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="powershell"><span class="n">PS</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">curl</span><span class="w"> </span><span class="nt">-X</span><span class="w"> </span><span class="nx">POST</span><span class="w"> </span><span class="nx">localhost:8080/hello</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="s1">'{\"nome\":\"Francesco\"}'</span><span class="w"> </span><span class="nt">-H</span><span class="w"> </span><span class="s1">'Content-Type: application/json'</span><span class="w">
</span><span class="n">Hello</span><span class="w"> </span><span class="nx">Francesco</span><span class="o">!</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Utilizzando Powershell è necessario aggiungere il carattere <strong>\</strong> per effettuare l&#8217;escaping del doppio apice (") utilizzando una shell linux possiamo semplicemente digitare:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell"><span class="nv">$ </span>curl <span class="nt">-X</span> POST localhost:8080/hello <span class="nt">-d</span> <span class="s1">'{"nome":"francesco"}'</span> <span class="nt">-H</span> <span class="s1">'Content-Type: application/json'</span>
Hello francesco!</code></pre>
</div>
</div>
<div class="paragraph">
<p>Possiamo notare inoltre l&#8217;aggiunta di un header HTTP: <strong>Content-Type: application/json</strong>. Questo header ha fondamentale importanza per il nostro server in quanto fornisce una chiave di lettura per la serie di bytes presenti nel corpo della richiesta HTTP (bisogna effettuare la <strong>deserializzazione</strong> del corpo della richiesta!). Cosa accadrebbe se non lo inviassimo?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell"><span class="nv">$ </span>curl <span class="nt">-X</span> POST localhost:8080/hello <span class="nt">-d</span> <span class="s1">'{"nome":"francesco"}'</span> <span class="nt">-v</span>
<span class="k">*</span>   Trying 127.0.0.1:8080...
<span class="k">*</span> TCP_NODELAY <span class="nb">set</span>
<span class="k">*</span> Connected to localhost <span class="o">(</span>127.0.0.1<span class="o">)</span> port 8080 <span class="o">(</span><span class="c">#0)</span>
<span class="o">&gt;</span> POST /hello HTTP/1.1
<span class="o">&gt;</span> Host: localhost:8080
<span class="o">&gt;</span> User-Agent: curl/7.68.0
<span class="o">&gt;</span> Accept: <span class="k">*</span>/<span class="k">*</span>
<span class="o">&gt;</span> Content-Length: 20
<span class="o">&gt;</span> Content-Type: application/x-www-form-urlencoded
<span class="o">&gt;</span>
<span class="k">*</span> upload completely sent off: 20 out of 20 bytes
<span class="k">*</span> Mark bundle as not supporting multiuse
&lt; HTTP/1.1 415
&lt; Accept: application/json, application/<span class="k">*</span>+json
&lt; Content-Type: application/json
&lt; Transfer-Encoding: chunked
&lt; Date: Thu, 06 Oct 2022 17:08:20 GMT
&lt;
<span class="k">*</span> Connection <span class="c">#0 to host localhost left intact</span>
<span class="o">{</span><span class="s2">"timestamp"</span>:<span class="s2">"2022-10-06T17:08:20.010+00:00"</span>,<span class="s2">"status"</span>:415,<span class="s2">"error"</span>:<span class="s2">"Unsupported Media Type"</span>,<span class="s2">"path"</span>:<span class="s2">"/hello"</span><span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Come possiamo notare cURL in assenza di un&#8217;indicazione differente imposta il Content-Type come: <strong>application/x-www-form-urlencoded</strong>. Non avendo istruito il nostro handler all&#8217;interno della classe @Controller ad attendersi questo tipo di Content-Type il server ci risponderà che non saprà come gestirlo.</p>
</div>
</div>
<div class="sect2">
<h3 id="_esercizi_getting_started">Esercizi: Getting Started</h3>
<div class="paragraph">
<p>Prima di cominciare con gli esercizi veri e propri raccomandiamo la creazione di un repository Git dedicato al rilascio degli esercizi del corso. Si consiglia l&#8217;utilizzo di:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/">Github</a></p>
</li>
<li>
<p><a href="https://about.gitlab.com/">Gitlab</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si consiglia di prendere familiarità con i seguenti comandi al fine di poter</p>
</div>
<div class="sect3">
<h4 id="_1_1_hello_world">1.1 Hello World!</h4>
<div class="paragraph">
<p>Tramite <a href="https://start.spring.io/">spring initializr</a> generare un nuovo progetto Gradle con linguaggio Java 17 e versione Spring 2.7.*.</p>
</div>
<div class="paragraph">
<p>Aggiungere come dipendenze:
*   Spring Web</p>
</div>
<div class="paragraph">
<p>Aprire il progetto Gradle tramite VSCode.</p>
</div>
<div class="paragraph">
<p>Lo scopo dell&#8217;esercizio è creare una classe @Controller che effettui il bind sul webserver integrato sul path <strong>/hello</strong>.</p>
</div>
<div class="paragraph">
<p>In particolare il webserver sarà in ascolto sulla porta 8080 e l&#8217;API risponderà con un corpo di tipo String.</p>
</div>
<div class="paragraph">
<p>La risposta desiderata sarà:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell">	curl http://localhost:8080/hello
	Hello, World!</code></pre>
</div>
</div>
<div class="paragraph">
<p>La classe Controller dovrà essere contenuto in un nuovo sub_package del medesimo package di DemoApplication.java</p>
</div>
</div>
<div class="sect3">
<h4 id="_1_2_request_params">1.2 Request Params</h4>
<div class="paragraph">
<p>Modificare l&#8217;esercizio precedente affinché l&#8217;api risponda dinamicamente al nome dell&#8217;utente. Il nome utente potrà essere passato con uno dei seguenti parametri opzionali:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>query string parameter <strong>nome</strong> - API: /hello</p>
</li>
<li>
<p>path parameter - API: /hello/{{nome}}</p>
</li>
<li>
<p>HTTP Header - API: /hello</p>
</li>
<li>
<p>Cookie value <strong>nome</strong> - API: /hello</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>output atteso: <strong>Hello {{nome}}!</strong></p>
</div>
<div class="paragraph">
<p>Nel caso in cui nessuno di questi parametri sia passato restituire il valore di default <strong>Hello, World!</strong></p>
</div>
</div>
<div class="sect3">
<h4 id="_1_3_request_body">1.3 Request Body</h4>
<div class="paragraph">
<p>Modificare l&#8217;API /hello affichè accetti un @RequestBody json con unico parametro <strong>nome</strong> in modo che l&#8217;API risponda con il nome dell&#8217;utente. L&#8217;API Risponderà con verbo POST</p>
</div>
</div>
<div class="sect3">
<h4 id="_1_4_dto_employee">1.4 DTO Employee</h4>
<div class="paragraph">
<p>Creare un subpackage <strong>dto</strong> al cui interno creeremo una classe <strong>Employee</strong>. Employee rappresenta l&#8217;impiegato di un determinato dominio aziendale così caratterizzato.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>matricola: intero</p>
</li>
<li>
<p>name: testo</p>
</li>
<li>
<p>surname: testo</p>
</li>
<li>
<p>displayName: name + surname</p>
</li>
<li>
<p>birthdate: data di nascita</p>
</li>
<li>
<p>sex: m/f</p>
</li>
<li>
<p>RAL: intero</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In particolare il campo matricola definisce in maniera univoca l&#8217;impiegato.</p>
</div>
<div class="paragraph">
<p>creare un&#8217;API GET /employee che restituisca un impiegato fittizio, la risposta attesa dovrà essere:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="nl">"matricola"</span><span class="p">:</span><span class="w"> </span><span class="mi">1022891</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mario"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"surname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"displayName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mario Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"birthdate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"01-01-1989"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sex"</span><span class="p">:</span><span class="s2">"m"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"RAL"</span><span class="p">:</span><span class="w"> </span><span class="mi">30000</span><span class="w">
</span><span class="p">}</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_1_5_employee_list">1.5 Employee List</h4>
<div class="paragraph">
<p>Creare un&#8217;api GET /employees che restituisca una lista di impiegati Employee. Output atteso:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="json"><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
    </span><span class="nl">"matricola"</span><span class="p">:</span><span class="w"> </span><span class="mi">1022891</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mario"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"surname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"displayName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mario Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"birthdate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"01-01-1989"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sex"</span><span class="p">:</span><span class="s2">"m"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"RAL"</span><span class="p">:</span><span class="w"> </span><span class="mi">30000</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
    </span><span class="nl">"matricola"</span><span class="p">:</span><span class="w"> </span><span class="mi">1022892</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Flavia"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"surname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"displayName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Flavia Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"birthdate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"02-01-1989"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sex"</span><span class="p">:</span><span class="s2">"f"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"RAL"</span><span class="p">:</span><span class="w"> </span><span class="mi">30000</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span></code></pre>
</div>
</div>
<div class="admonitionblock caution">
<table>
<tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Quando avete creato l&#8217;oggetto Employee, avete definito i metodi equals ed hashcode? Perché sono importanti?</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_1_6_add_employee">1.6 Add Employee</h4>
<div class="paragraph">
<p>Creare un&#8217;api POST /employee che aggiunta un impiegato alla lista esistente di impiegati Employee. Il request body dovrà essere in formato JSON l&#8217;API risponde con la lista di impiegati aggiornata.</p>
</div>
</div>
<div class="sect3">
<h4 id="_1_7_change_employee">1.7 Change Employee</h4>
<div class="paragraph">
<p>Creare un&#8217;api PUT /employee/{matricola} che aggiorni la RAL di un impiegato data la sua matricola, il parametro sarà passato come corpo della richiesta in formato x-www-form-urlencoded</p>
</div>
</div>
<div class="sect3">
<h4 id="_1_8_change_employee_cont">1.8 Change Employee (cont.)</h4>
<div class="paragraph">
<p>Arricchire l&#8217;API precedente per modificare qualunque campo dell&#8217;impiegato, esclusa la matricola</p>
</div>
</div>
<div class="sect3">
<h4 id="_1_9_delete_employee">1.9 Delete Employee</h4>
<div class="paragraph">
<p>Creare l&#8217;API DELETE /employee/{matricola} che consente di aggiornare l&#8217;elenco di impiegati in caso di licenziamento o dimissione dell&#8217;impiegato con matricola data.</p>
</div>
</div>
<div class="sect3">
<h4 id="_1_10_compare_employee">1.10 Compare employee</h4>
<div class="paragraph">
<p>Creare un&#8217;API /employee/compare che riceve in request body una lista di Employee (2) e ne effettua il confronto, in particolare ci aspettiamo che l&#8217;esito di questo confronto:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="json"><span class="p">[{</span><span class="w">
    </span><span class="nl">"matricola"</span><span class="p">:</span><span class="w"> </span><span class="mi">1022891</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mario"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"surname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"displayName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mario Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"birthdate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"01-01-1989"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sex"</span><span class="p">:</span><span class="s2">"m"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"RAL"</span><span class="p">:</span><span class="w"> </span><span class="mi">30000</span><span class="w">
</span><span class="p">},</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"matricola"</span><span class="p">:</span><span class="w"> </span><span class="mi">1022891</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Francesco"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"surname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"displayName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Francesco Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"birthdate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"20-01-1989"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sex"</span><span class="p">:</span><span class="s2">"m"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"RAL"</span><span class="p">:</span><span class="w"> </span><span class="mi">50000</span><span class="w">
</span><span class="p">}]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>restituisca <strong>true</strong> come risposta, questo confronto invece</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="nl">"matricola"</span><span class="p">:</span><span class="w"> </span><span class="mi">1022891</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mario"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"surname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"displayName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mario Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"birthdate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"01-01-1989"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sex"</span><span class="p">:</span><span class="s2">"m"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"RAL"</span><span class="p">:</span><span class="w"> </span><span class="mi">30000</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"matricola"</span><span class="p">:</span><span class="w"> </span><span class="mi">1022892</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Francesco"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"surname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"displayName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Francesco Rossi"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"birthdate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"20-01-1989"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sex"</span><span class="p">:</span><span class="s2">"m"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"RAL"</span><span class="p">:</span><span class="w"> </span><span class="mi">50000</span><span class="w">
</span><span class="p">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>restituisca <strong>false</strong></p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Utilizzare i soli metodi ereditati dalla superclasse Object per effettuare il confronto</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_1_11_find_employee_in_lista">1.11 Find Employee in lista</h4>
<div class="paragraph">
<p>Creare un&#8217;API /employee/find che riceva in request body un employee e determini se presente in azienda. L&#8217;elenco degli impiegati sarà memorizzato in una lista.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Utilizzare i soli metodi delle strutture dati Java per verificare la presenza</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_1_12_find_employee_in_insieme">1.12 Find Employee in insieme</h4>
<div class="paragraph">
<p>Effettuare il medesimo controllo dell&#8217;esercizio precedente, ma verificandone la presenza in un insieme.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Utilizzare i soli metodi delle strutture dati Java per verificare la presenza</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_capitolo_2_la_logica_di_business_e_come_implementarla">Capitolo 2: La logica di business e come implementarla</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Abbiamo fornito una prima introduzione sul mondo Spring e Springboot, abbiamo implementato i primi controller e scoperto come comunica con i clients. Per costruire servizi sofisticati tuttavia questo non basta. Un @Controller infatti deve descrivere l&#8217;interfaccia tra il webserver e l&#8217;applicazione vera e propria. Il modello di programmazione ad oggetti scoraggia il popolamento di interfacce con complesse logiche di business/applicative.</p>
</div>
<div class="paragraph">
<p>La ragione non è realmente funzionale, volendo potremmo scrivere una sofisticatissima applicazione in un unico file e funzionerebbe esattamente come un&#8217;applicazione ben progettata, ossia con una rigorosa suddivisione in packages, interfacce chiare ed implementazioni che rispettino il dominio di interesse.</p>
</div>
<div class="paragraph">
<p>La reale ragione consiste nella leggibilità, manutenibilità ed estensibilità del software che stiamo scrivendo.</p>
</div>
<div class="paragraph">
<p>Un software ben scritto ci consente inoltre di ben comprendere le eventuali anomalia che si presentano durante la sua esecuzione, agevolando non poco le procedure di troubleshooting.</p>
</div>
<div class="paragraph">
<p>Il framework Spring incoraggia questo approccio fornendo allo sviluppatore dei beans speciali dedicati a compiti specifici.</p>
</div>
<div class="sect2">
<h3 id="_service_autowired">@Service + @Autowired</h3>
<div class="paragraph">
<p>Come abbiamo accennato in precedenza, pur essendo sintatticamente corretto, implementare un flusso complicato all&#8217;interno di un metodo di un @Controller ne riduce la leggibilità, ed essendo un elemento di interfaccia sarebbe bene tenerlo come mera classe di presentation.</p>
</div>
<div class="paragraph">
<p>Spring ha un @Component speciale chiamato @Service. Questo componente è tipicamente quello che ospita la logica di business di un determinato dominio.</p>
</div>
<div class="paragraph">
<p>Riprendendo il lavoro del capitolo 1 possiamo creare un <strong>HelloWorldService</strong> con un metodo <strong>sayHello</strong> che, dato un DTO HelloWorldDTO restituisca un saluto con il nostro nome.</p>
</div>
<div class="paragraph">
<p>Vediamo la classe @Service:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.example.demo.dto.HelloWorldDTO</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldService</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">sayHello</span><span class="o">(</span><span class="nc">HelloWorldDTO</span> <span class="n">helloDto</span><span class="o">){</span>
        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Hello %s!"</span><span class="o">,</span><span class="n">helloDto</span><span class="o">.</span><span class="na">getNome</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Sembrerebbe una semplicissima classe Java con un metodo d&#8217;istanza che restituisca l&#8217;hello world, con qualche piccola eccezione. Innanzitutto l&#8217;abbiamo annotata con il decoratore @Service. Avendo inserito questa classe all&#8217;interno di un subpackage dell&#8217;applicazione principale, Spring Boot inizializzerà questa classe ed i suoi beans all&#8217;interno. Notiamo inoltre che non abbiamo dichiarato il costruttore di default, la sua inizializzazione avverrà durante l&#8217;avvio del software per via del fatto che @Service è una specializzazione di @Component, e quindi sarà soggetto alle logiche di inizializzazione e bean injection di Spring.</p>
</div>
<div class="paragraph">
<p>Abbiamo creato dunque la nostra classe di servizio, ma come facciamo a richiamarla all&#8217;interno del nostro controller? Ciò che è necessario fare è in qualche modo <em>collegare</em> le classi @Controller e @Service - ciò è possibile trame un @Decoratore particolare detto <strong>Autowired</strong>. Vediamo come potrebbe essere riscritto l&#8217;HelloWorldController tramite questa annotazione:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PostMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.example.demo.dto.HelloWorldDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.demo.service.HelloWorldService</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">HelloWorldService</span> <span class="n">helloWorldService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nd">@ResponseBody</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">helloWorld</span><span class="o">(</span>
            <span class="nd">@RequestBody</span> <span class="nc">HelloWorldDTO</span> <span class="n">helloWorldDTO</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">helloWorldService</span><span class="o">.</span><span class="na">sayHello</span><span class="o">(</span><span class="n">helloWorldDTO</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Nuovamente notiamo che non vi è una inizializzazione esplicita dell&#8217;oggetto Java HelloWorldService, l&#8217;oggetto è stato inizializzato a runtime da Spring e collegato al nostro @RestController tramite la decorazione @Autowired. Per questa ragione, quando invocheremo il metodo di istanza <strong>sayHello</strong>, non riceveremo un NullPointerException ma otterremo il messaggio che ci aspettiamo. Effettuiamo ora il test:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell"><span class="nv">$ </span>curl <span class="nt">-X</span> POST http://localhost:8080/hello <span class="nt">-d</span> <span class="s1">'{"nome": "Francesco"}'</span> <span class="nt">-H</span> <span class="s1">'Content-Type:application/json'</span>
Hello Francesco!</code></pre>
</div>
</div>
<div class="paragraph">
<p>Abbiamo effettuato il collegamento tra un @Controller ed un @Service, ma niente ci vieta di effettuare in @Autowired il collegamento tra due classi @Service. Questo pattern non è inusuale in quanto è possibile costruire il Service Layer della nostra applicazione componendo tra di loro diversi elementi omogenei.</p>
</div>
</div>
<div class="sect2">
<h3 id="_component">@Component</h3>
<div class="paragraph">
<p>Il @Component è un decoratore, proprio come @Service, pur non essendo specifico di alcun layer applicativo, abbiamo la possibilità di utilizzarlo proprio come @Service. La sua inizializzazione avverrà a runtime, ed i beans in esso contenuti verranno inizializzati a cascata, purché posto in un subpackage della nostra @SpringApplication.</p>
</div>
</div>
<div class="sect2">
<h3 id="_configuration">@Configuration</h3>
<div class="paragraph">
<p>Il decoratore @Configuration è un decoratore speciale in quanto effettua il binding con un file speciale delle nostre applicazioni java chiamato <strong>application.properties</strong>. Si tratta di un file di testo particolare attraverso il quale è possibile inizializzare una mappa di coppie chiave valore, od una lista di elementi.</p>
</div>
<div class="paragraph">
<p>Perché è importante memorizzare valori in questi files anziché renderli disponibili direttamente nel codice? Modificare un file di test è di gran lunga più conveniente che non ricompilare l&#8217;intera applicazione per modificare, ad esempio, una semplice label di testo.</p>
</div>
<div class="paragraph">
<p>Riportiamo un esempio di application.properties contenente un&#8217;unica configurazione, riportandoci all&#8217;esempio di HelloWorld immaginiamoci un messaggio di saluto di default da utilizzare in caso non inviassimo alcun nome come parametro</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="properties"><span class="py">helloworld.defaultmessage</span><span class="p">=</span><span class="s">"Hello World!"</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Non appena inseriamo questa linea in application.properties vedremo che il nostro IDE (in questo caso VSCode) ci segnala il seguente messaggio:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./img/appproperties_unkown.jpg" alt="appproperties unkown">
</div>
</div>
<div class="paragraph">
<p>La property che abbiamo appena dichiarato non fa parte di alcuna property dichiarata nei packages che abbiamo importato (ad esempio non è una property di SprinBoot). Per questa ragione ci invita a dichiararne la tipologia ed a fornire una descrizione della property in modo che chi importa il software comprenda i valori al suo interno.</p>
</div>
<div class="paragraph">
<p>Per fare ciò creeremo un nuovo file chiamato <strong>additional-spring-configuration-metadata.json</strong> all&#8217;interno della cartella ./src/main/resources/META-INF</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./img/appproperties_additional.jpg" alt="appproperties additional">
</div>
</div>
<div class="paragraph">
<p>al suo interno descriveremo il dominio di valori accettato per la nuova property ed una descrizione:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"helloworld.defaultmessage"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"java.lang.String"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Messaggio di default in caso di assenza helloDto'"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>A questo punto possiamo creare il nuovo componente Spring @Configuration. Creeremo dunque un subpackage <strong>configuration</strong> che conterrà i file di configurazione della nostra applicazione.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.boot.context.properties.ConfigurationProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">"helloworld"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldConfiguration</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">defaultMessage</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">HelloWorldConfiguration</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">HelloWorldConfiguration</span><span class="o">(</span><span class="nc">String</span> <span class="n">defaultMessage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">defaultMessage</span> <span class="o">=</span> <span class="n">defaultMessage</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getDefaultMessage</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">defaultMessage</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDefaultMessage</span><span class="o">(</span><span class="nc">String</span> <span class="n">defaultMessage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">defaultMessage</span> <span class="o">=</span> <span class="n">defaultMessage</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">HelloWorldConfiguration</span> <span class="nf">defaultMessage</span><span class="o">(</span><span class="nc">String</span> <span class="n">defaultMessage</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">setDefaultMessage</span><span class="o">(</span><span class="n">defaultMessage</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="k">this</span><span class="o">)</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">HelloWorldConfiguration</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">HelloWorldConfiguration</span> <span class="n">helloWorldConfiguration</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HelloWorldConfiguration</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">defaultMessage</span><span class="o">,</span> <span class="n">helloWorldConfiguration</span><span class="o">.</span><span class="na">defaultMessage</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">defaultMessage</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"{"</span> <span class="o">+</span>
                <span class="s">" defaultMessage='"</span> <span class="o">+</span> <span class="n">getDefaultMessage</span><span class="o">()</span> <span class="o">+</span> <span class="s">"'"</span> <span class="o">+</span>
                <span class="s">"}"</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Oltre al decoratore @Configuration aggiungeremo il decoratore @ConfigurationProperties specificando il prefisso a partire dal quale i campi della classe saranno popolati. Come è possibile notare il nome della variabile è <strong>defaultMessage</strong> è leggermente diverso da quello della property che abbiamo dichiarato <strong>defaultmessage</strong>. Questo disallineamento è voluto in quanto vogliamo dimostrare come Spring, data una classe configuration, consenta allo sviluppatore di scrivere la property in diversi modi. In particolare sarebbe riuscito a leggere qualunque di questi valori:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="properties"><span class="err">helloworld.defaultMessage</span>
<span class="err">helloworld.defaultmessage</span>
<span class="err">helloworld.default_message</span>
<span class="err">helloworld.default-message</span>
<span class="err">helloworld.DEFAULT_MESSAGE</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Come possiamo dunque utilizzare questa @Configuration? Di nuovo, tramite @Autowired !</p>
</div>
<div class="paragraph">
<p>Modifichiamo dunque la classe HelloWorldService in modo da importare la classe @Configuration e sfruttarla per gli scopi che ci siamo prefissati:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.example.demo.configuration.HelloWorldConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.demo.dto.HelloWorldDTO</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">HelloWorldConfiguration</span> <span class="n">helloWorldConfiguration</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">sayHello</span><span class="o">(</span><span class="nc">HelloWorldDTO</span> <span class="n">helloDto</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">helloDto</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">helloDto</span><span class="o">.</span><span class="na">getNome</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="s">""</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">helloDto</span><span class="o">.</span><span class="na">getNome</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">helloWorldConfiguration</span><span class="o">.</span><span class="na">getDefaultMessage</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">else</span>
            <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Hello %s!"</span><span class="o">,</span> <span class="n">helloDto</span><span class="o">.</span><span class="na">getNome</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Per mezzo di @Autowired HelloWorldService sarà in grado di accedere ai campi di HelloWorldConfiguration ed effettuare logica, avete notato che non abbiamo mai invocato il costruttore passando i parametri di application.properties? Questa operazione viene effettuata in automatico dal framework in fase di avvio della nostra applicazione!</p>
</div>
<div class="paragraph">
<p>Abbiamo modificato il servizio affichè, qualora il DTO fosse nullo, di restituire un messaggio di saluto di default.</p>
</div>
<div class="paragraph">
<p>Proviamo dunque ad invocare l&#8217;API:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell">curl <span class="nt">-X</span> POST http://localhost:8080/hello
<span class="o">{</span><span class="s2">"timestamp"</span>:<span class="s2">"2022-10-12T07:03:31.517+00:00"</span>,<span class="s2">"status"</span>:400,<span class="s2">"error"</span>:<span class="s2">"Bad Request"</span>,<span class="s2">"path"</span>:<span class="s2">"/hello"</span><span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perchè sta accadendo questo? La ragione potrebbe risiedere nel fatto che stiamo invocando la nostra API senza passare alcun @RequestBody.</p>
</div>
<div class="paragraph">
<p>In effetti, consultando l&#8217;implementazione del decoratore:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="cm">/**
 * Annotation indicating a method parameter should be bound to the body of the web request.
 * The body of the request is passed through an {@link HttpMessageConverter} to resolve the
 * method argument depending on the content type of the request. Optionally, automatic
 * validation can be applied by annotating the argument with {@code @Valid}.
 *
 * &lt;p&gt;Supported for annotated handler methods.
 *
 * @author Arjen Poutsma
 * @since 3.0
 * @see RequestHeader
 * @see ResponseBody
 * @see org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
 */</span>
<span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">PARAMETER</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Documented</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">RequestBody</span> <span class="o">{</span>

	<span class="cm">/**
	 * Whether body content is required.
	 * &lt;p&gt;Default is {@code true}, leading to an exception thrown in case
	 * there is no body content. Switch this to {@code false} if you prefer
	 * {@code null} to be passed when the body content is {@code null}.
	 * @since 3.2
	 */</span>
	<span class="kt">boolean</span> <span class="nf">required</span><span class="o">()</span> <span class="k">default</span> <span class="kc">true</span><span class="o">;</span>

<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Notiamo che lo sviluppatore ci ha lasciato un&#8217;indicazione ben precisa riguardo al fatto che, se omesso il campi required, sarà impostato di default a <strong>true</strong>, rendendo obbligatoria la presenza di un request body alla nostra chiamata.</p>
</div>
<div class="paragraph">
<p>Modifichiamo dunque il controller rendendo il @RequestBody opzionale:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">HelloWorldService</span> <span class="n">helloWorldService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nd">@ResponseBody</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">helloWorld</span><span class="o">(</span>
            <span class="nd">@RequestBody</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="nc">HelloWorldDTO</span> <span class="n">helloWorldDTO</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">helloWorldService</span><span class="o">.</span><span class="na">sayHello</span><span class="o">(</span><span class="n">helloWorldDTO</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>provando ora ad invocare il servizio:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell">curl <span class="nt">-X</span> POST http://localhost:8080/hello
<span class="s2">"Hello, World!"</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exception_handling">Exception Handling</h3>
<div class="paragraph">
<p>La gestione delle eccezioni è una parte fondamentale dell&#8217;implementazione delle logiche di business della nostra applicazione.</p>
</div>
<div class="paragraph">
<p>In un mondo perfetto potremmo sviluppare il nostro codice dando per scontato che funzioni sempre tutto, dalla nostra logia interna alle interazioni con i clients ed i servizi esterni.</p>
</div>
<div class="paragraph">
<p>Purtroppo il nostro software, il software con il quale ci integriamo, i frameworks che utilizziamo e le infrastrutture hardware e network che utilizziamo (inclusi i sistemi operativi, gli adattatore di rete ed i drivers) sono possibili oggetti di fallimento per le cause più disparate.</p>
</div>
<div class="paragraph">
<p>È fondamentale rendere il nostro software robusto a queste anomalie, pensando <strong>sempre</strong> a cosa potrebbe accadere nel caso peggiore ed informare chi ci chiama del fatto che la sua richiesta è andata in errore, invitando a riprovare oppure a modificare la richiesta inviata, qualora questa non fosse aderente a ciò che ci aspettiamo.</p>
</div>
<div class="paragraph">
<p>Che cos&#8217;è una eccezione od <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Exception.html">Exception</a>?</p>
</div>
<div class="quoteblock">
<blockquote>
The class Exception and its subclasses are a form of Throwable that indicates conditions that a reasonable application might want to catch.
</blockquote>
<div class="attribution">
&#8212; <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Exception.html">Exception javadoc</a>
</div>
</div>
<div class="paragraph">
<p>In generale, utilizzeremo le eccezioni per segnalare un comportamento inatteso, indesiderato, imprevisto del nostro codice affinché chi invoca il nostro software (il client od anche il software stesso al suo interno) possa gestirlo.</p>
</div>
<div class="paragraph">
<p>Abbiamo già avuto modo di vedere che Spring, in alcuni casi particolari di errore, già risponde al client con un certo oggetto di risposta, quest&#8217;oggetto si chiama <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/server/ResponseStatusException.html">ResponseStatusException</a></p>
</div>
<div class="paragraph">
<p>In caso di necessità possiamo effettuare il throw di una nuova eccezione di questo tipo all&#8217;interno del nostro codice, ad esempio:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/testexception"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@ResponseBody</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">testException</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ResponseStatusException</span><span class="o">(</span>
            <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">,</span> <span class="s">"NOT_FOUND"</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>ci restituirà in caso di invocazione:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell">curl <span class="nt">-X</span> POST localhost:8080/testexception
<span class="o">{</span><span class="s2">"timestamp"</span>:<span class="s2">"2022-10-12T13:30:23.304+00:00"</span>,<span class="s2">"status"</span>:404,<span class="s2">"error"</span>:<span class="s2">"Not Found"</span>,<span class="s2">"path"</span>:<span class="s2">"/testexception"</span><span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Per utilizzi semplici è un ottimo strumento, tuttavia spesso abbiamo la necessità di comunicare messaggi di errore più parlanti dei semplici ritorni del protocollo HTTP, pensiamo ad esempio ad un errore restituito da un webserver dopo la validazione di un determinato @ResponseBody, magari vogliamo rispondere al chiamante che uno o più campi non sono validi e quindi di riprovare.</p>
</div>
<div class="paragraph">
<p>Come possiamo fare dunque?</p>
</div>
<div class="paragraph">
<p>Una buona idea sarebbe creare una nostra classe di Eccezione che abbiamo un codice di errore ed un messaggio di errore applicativi, magari censiti staticamente come dei Java enums:.</p>
</div>
<div class="paragraph">
<p>Creiamo dunque un subpackage <strong>exception</strong> ed all&#8217;interno creiamo la nostra Eccezione di risposta alle API chiamata <strong>ApiException</strong>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.exception</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.http.HttpStatus</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.lang.Nullable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.server.ResponseStatusException</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiException</span> <span class="kd">extends</span> <span class="nc">ResponseStatusException</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">ErrorCode</span> <span class="n">errorcode</span><span class="o">;</span>

    <span class="cm">/**
	 * Constructor with a response status.
	 * @param status the HTTP status (required)
	 */</span>
	<span class="kd">public</span> <span class="nf">ApiException</span><span class="o">(</span><span class="nc">HttpStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">status</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
	<span class="o">}</span>

    <span class="cm">/**
	 * Constructor with a response status.
	 * @param status the HTTP status (required)
     * @param error the errorCode
	 */</span>
	<span class="kd">public</span> <span class="nf">ApiException</span><span class="o">(</span><span class="nc">HttpStatus</span> <span class="n">status</span><span class="o">,</span> <span class="nc">ErrorCode</span> <span class="n">errorcode</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">status</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">errorcode</span> <span class="o">=</span> <span class="n">errorcode</span><span class="o">;</span>
	<span class="o">}</span>

    <span class="kd">public</span> <span class="nc">ErrorCode</span> <span class="nf">getErrorcode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">errorcode</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setErrorcode</span><span class="o">(</span><span class="nc">ErrorCode</span> <span class="n">errorcode</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">errorcode</span> <span class="o">=</span> <span class="n">errorcode</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="k">this</span><span class="o">)</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">ApiException</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">ApiException</span> <span class="n">apiException</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ApiException</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">errorcode</span><span class="o">,</span> <span class="n">apiException</span><span class="o">.</span><span class="na">errorcode</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">errorcode</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Definiamo inoltre nel medesimo subpackage <strong>ErrorCode</strong>, enum contenente tutti i nostri errore applicativi:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.exception</span><span class="o">;</span>

<span class="cm">/**
 * StatusCode allowed types
 */</span>
<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">ErrorCode</span> <span class="o">{</span>

    <span class="no">HTTP_400</span><span class="o">(</span><span class="s">"NOT_FOUND"</span><span class="o">);</span>



    <span class="kd">private</span> <span class="nc">String</span> <span class="n">description</span><span class="o">;</span>

    <span class="nc">ErrorCode</span><span class="o">(</span><span class="nc">String</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">description</span> <span class="o">=</span> <span class="n">description</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">description</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Creiamo un handler di prova per testare la nostra nuova eccezione:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/customexception"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@ResponseBody</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">customException</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ApiException</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">,</span> <span class="nc">ErrorCode</span><span class="o">.</span><span class="na">APP_ERROR</span><span class="o">);</span>
<span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Infine testiamo la nostra API:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="shell">curl <span class="nt">-X</span> POST localhost:8080/customexception
<span class="o">{</span><span class="s2">"timestamp"</span>:<span class="s2">"2022-10-12T14:19:40.320+00:00"</span>,<span class="s2">"status"</span>:400,<span class="s2">"error"</span>:<span class="s2">"Bad Request"</span>,<span class="s2">"path"</span>:<span class="s2">"/customexception"</span><span class="o">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Com&#8217;è possibile notare l&#8217;eccezione è stata lanciata, ma non notiamo alcuna differenza rispoetto all&#8217;eccezione lanciata costruendo un oggetto ResponseStatusException.</p>
</div>
<div class="paragraph">
<p>Questo perchè Spring ha internamente un oggetto chiamato Exception Handler che intercetta quella specifica eccezione (e non le sue derivazioni od estensioni) e quindi ignora i campi aggiuntivi che potrebbero essere stati aggiunti.</p>
</div>
<div class="paragraph">
<p>Al fine di risolvere questo problema dovremo creare noi il nostro exception handler in modo che gestisca la risposta nel modo in cui ci aspettiamo!</p>
</div>
</div>
<div class="sect2">
<h3 id="_esercizi">Esercizi</h3>
<div class="sect3">
<h4 id="_2_1">2.1</h4>
<div class="paragraph">
<p>Spostare tutta la logica di business, strutture dati incluse, in apposita classe @Service chiamata EmployeeService ed integrarla in EmployeeController (con tutte le CRUD operations implementate in precedenza).</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Per inizializzare le strutture dati in fase di inizializzazione dei beans è possibile utilizzare <a href="https://www.baeldung.com/spring-postconstruct-predestroy">@PostConstruct</a></p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_2_2">2.2</h4>
<div class="paragraph">
<p>Creare una eccezione Custom chiamata "NotFoundException" che risalga all&#8217;utente nel caso in cui si effettui la GET di /employee/{matricola} e l&#8217;impiegato con tale matricola non esista.</p>
</div>
<div class="paragraph">
<p>Risposta attesa:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="json"><span class="p">{</span><span class="nl">"timestamp"</span><span class="p">:</span><span class="s2">"2022-10-12T13:30:23.304+00:00"</span><span class="p">,</span><span class="nl">"status"</span><span class="p">:</span><span class="mi">404</span><span class="p">,</span><span class="nl">"error"</span><span class="p">:</span><span class="s2">"Not Found"</span><span class="p">,</span><span class="nl">"path"</span><span class="p">:</span><span class="s2">"/testexception"</span><span class="p">}</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_2_3">2.3</h4>
<div class="paragraph">
<p>Creare una eccezione Custom chiamata "ConflictException" che risalga all&#8217;utente nel caso in cui si effettui una addEmployee e l&#8217;impiegato esiste già.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_soluzioni">Soluzioni</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldController</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="n">path</span><span class="o">=</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">helloWorld</span><span class="o">(){</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="s">"Hello, World!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2022-10-14 11:18:53 +0200
</div>
</div>
</body>
</html>